import streamlit as st
import numpy as np
import cv2
from PIL import Image
from pydub import AudioSegment
from pydub.playback import play
from io import BytesIO
import os

def create_video(audio_file, image_file):
    try:
        st.write("–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ...")
        audio = AudioSegment.from_file(audio_file)
        duration = len(audio) / 1000  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        st.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration} —Å–µ–∫—É–Ω–¥")
        
        st.write("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        img = Image.open(image_file)
        img = img.resize((1280, 720))  # –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–µ–æ
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        video_path = "/tmp/visualization_video.mp4"
        out = cv2.VideoWriter(video_path, fourcc, 30.0, (1280, 720))
        
        for t in range(int(duration * 30)):  # 30 fps
            frame = np.array(img)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏: –¥–≤–∏–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç—Ä—è—Å–∫–∞)
            shake = int(np.sin(t / 10) * 20)  # –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Ç—Ä—è—Å–∫—É
            frame = np.roll(frame, shake, axis=1)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            frame = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)
            frame[..., 0] = (frame[..., 0] + shake) % 180  # –°–¥–≤–∏–≥ –æ—Ç—Ç–µ–Ω–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            frame = cv2.cvtColor(frame, cv2.COLOR_HSV2RGB)
            
            # –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏—Ö –Ω–∞ –±–∏—Ç
            if t % 30 == 0:  # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–º 30 –∫–∞–¥—Ä–µ
                cv2.circle(frame, (640, 360), 100, (0, 255, 0), -1)  # –ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥
            
            out.write(frame)
        
        out.release()
        return video_path
    except Exception as e:
        st.write(f"–û—à–∏–±–∫–∞: {e}")
        return None

def main():
    st.title("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞—É–¥–∏–æ üé∂")
    audio_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", type=["mp3", "wav"])
    image_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png", "jpeg"])

    if audio_file and image_file:
        with st.spinner('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ...'):
            video_path = create_video(audio_file, image_file)
        
        if video_path:
            st.video(video_path)
            with open(video_path, "rb") as f:
                st.download_button("–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", data=f, file_name="visualization.mp4", mime="video/mp4")

if __name__ == "__main__":
    main()
